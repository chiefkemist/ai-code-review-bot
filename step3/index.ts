import type { Probot } from "probot";
import { load } from "@std/dotenv";
import { OpenAIProvider, AnthropicProvider, GeminiProvider } from "./llm-providers.ts";

try {
  await load({ export: true });
} catch (_e) {
  // .env file is optional
}

interface PullRequestFile {
  filename: string;
  additions: number;
  deletions: number;
}

interface LLMProvider {
  reviewCode(prompt: string): Promise<string>;
}

class AICodeReviewer {
  private providers: Record<string, LLMProvider> = {};

  constructor() {
    const openaiKey = Deno.env.get("OPENAI_API_KEY");
    const anthropicKey = Deno.env.get("ANTHROPIC_API_KEY");
    const googleKey = Deno.env.get("GOOGLE_API_KEY");

    if (openaiKey) {
      this.providers.openai = new OpenAIProvider(openaiKey);
    }

    if (anthropicKey) {
      this.providers.anthropic = new AnthropicProvider(anthropicKey);
    }

    if (googleKey) {
      this.providers.gemini = new GeminiProvider(googleKey);
    }
  }

  async reviewPR(_context: unknown, files: PullRequestFile[], diff: string) {

    // Try providers in order of preference
    const providerOrder = ["gemini", "openai", "anthropic"];
    let review = null;
    let usedProvider = null;

    for (const providerName of providerOrder) {
      if (!this.providers[providerName]) continue;

      try {
        const prompt = this.buildReviewPrompt(diff, files);
        review = await this.providers[providerName].reviewCode(prompt);
        usedProvider = providerName;
        break;
      } catch (error: unknown) {
        console.error(`${providerName} failed:`, error instanceof Error ? error.message : String(error));
        continue;
      }
    }

    if (!review) {
      throw new Error("All AI providers failed");
    }

    return { review, provider: usedProvider };
  }

  buildReviewPrompt(diff: string, files: PullRequestFile[]) {
    const fileList = files
      .map((f) => `- ${f.filename} (+${f.additions}, -${f.deletions})`)
      .join("\n");

    return `Please review the following code changes and provide a concise summary:

FILES MODIFIED:
${fileList}

DIFF:
${diff.substring(0, 8000)} ${diff.length > 8000 ? "... (truncated)" : ""}

Please provide:
1. Brief summary of changes
2. Any bugs or issues found
3. Security concerns (if any)  
4. Overall assessment (APPROVE/REQUEST_CHANGES/COMMENT)

Keep the response under 1000 characters.`;
  }
}

export default (app: Probot) => {
  const reviewer = new AICodeReviewer();

  app.on(["pull_request.opened", "pull_request.synchronize"], async (context) => {
    const { pull_request } = context.payload;
    const { owner, repo } = context.repo();
    const pull_number = pull_request.number;

    try {
      console.log(`Processing PR #${pull_number} in ${owner}/${repo}`);

      // Get PR files
      const { data: files } = await context.octokit.pulls.listFiles({
        owner,
        repo,
        pull_number,
      });

      // Get PR diff
      const { data: diff } = await context.octokit.pulls.get({
        owner,
        repo,
        pull_number,
        mediaType: {
          format: "diff",
        },
      });

      // Get AI review
      const { review, provider } = await reviewer.reviewPR(context, files, diff as unknown as string);

      // Post review comment
      await context.octokit.issues.createComment({
        owner,
        repo,
        issue_number: pull_number,
        body: `## 🤖 AI Code Review (${provider?.toUpperCase()})

${review}

---
*This review was generated by AI. Please use your judgment for final decisions.*`,
      });

      console.log(`Review posted for PR #${pull_number} using ${provider}`);
    } catch (error: unknown) {
      console.error(`Error processing PR #${pull_number}:`, error instanceof Error ? error.message : String(error));

      // Post error comment
      await context.octokit.issues.createComment({
        owner,
        repo,
        issue_number: pull_number,
        body: `## ❌ AI Review Failed

Sorry, I couldn't analyze this PR due to an error. Please try again later.

Error: \`${error instanceof Error ? error.message : String(error)}\``,
      });
    }
  });

  // Health check endpoint
  app.on("issues.opened", async (context) => {
    if (context.payload.issue.title.includes("[health-check]")) {
      await context.octokit.issues.createComment({
        ...context.issue(),
        body: "🤖 AI Code Review Bot is running and healthy!",
      });
    }
  });
}